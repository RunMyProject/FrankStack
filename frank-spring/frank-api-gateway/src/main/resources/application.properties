# application.properties
# Spring Boot application configuration
# -----------------------
# Default properties for Frank-API-Gateway microservice.
# 
# NOTES:
# - Currently using only application name.
# - In the future, consider adding:
#     • Server port and host configuration
#     • Spring profiles (dev, test, prod)
#     • Logging levels for debugging or production
#     • Database connection properties
#     • External service endpoints and credentials
#
# LIBRARIES / DEPENDENCIES USED IN THIS PROJECT:
# - spring-boot-starter-web: Provides REST API support with Spring MVC
# - spring-boot-starter-webflux: Reactive programming support for asynchronous non-blocking APIs
# - spring-boot-starter-actuator: Adds monitoring endpoints (health, metrics) for the service
# - spring-cloud-starter-gateway-server-webflux: Enables API Gateway routing, filters, and request handling
# - spring-cloud-starter-circuitbreaker-reactor-resilience4j: Provides circuit breaker patterns and resilience features
# - micrometer-registry-prometheus: Collects metrics for Prometheus monitoring
# - lombok: Simplifies Java code with annotations for getters, setters, constructors, etc.
# - spring-boot-devtools: Development tools for automatic reloads during coding
# - spring-boot-starter-test & reactor-test: Testing support for Spring Boot and reactive components
#
# Author: Edoardo Sabatini
# Date: 30 September 2025

# Application name - used for actuator endpoints, logging, and service identification
spring.application.name=frank-api-gateway

# End of application.properties
# Note: For more complex configurations, consider using application.yml for better readability and structure.
logging.level.org.springframework.web=DEBUG
# spring.main.web-application-type=servlet
spring.main.web-application-type=reactive
