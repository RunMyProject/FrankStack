# application.yml
# -----------------------
# Spring Boot application configuration
# -----------------------
# Application properties for Frank-Orchestrator microservice.
#
# Responsibilities:
# - Consume travel booking events (search, trip details, reservations) from Kafka topics
# - Acts as part of the travel saga
# - Handles messages produced by other microservices (like hotel or payment)
#
# NOTES:
# - Currently using default values.
# - Future adjustments may include:
#     ‚Ä¢ Profiles (dev, prod, test)
#     ‚Ä¢ Server port, host, logging levels
#     ‚Ä¢ Database connections
#     ‚Ä¢ External service endpoints
#
# Author: Edoardo Sabatini
# Date: 21 October 2025

spring:
  application:
    name: frank-orchestrator
  redis:
    key-prefix: "saga:"
    host: frankstack-redis        
    port: 6379
    lettuce:
      pool:
        max-active: 10
        max-idle: 5
        min-idle: 1
  kafka:
    bootstrap-servers: frankstack-kafka:9092
    consumer:
      group-id: frank-kafka-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

server:
  port: 8080

external:
  frankstack-kafka-producer-port-travel: 8082  # use 8081 to connect via API Gateway
  frankstack-kafka-producer-port-hotel: 8086  # use 8081 to connect via API Gateway
  # üåê Kafka Travel Producer service Docker address
  frankstack-kafka-travel-producer-host: frankstack-kafka-travel-producer
  # üåê Kafka Hotel Producer service Docker address
  frankstack-kafka-hotel-producer-host: frankstack-kafka-hotel-producer
